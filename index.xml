<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pietro Lesci</title>
    <link>https://lescipi.github.io/</link>
    <description>Recent content on Pietro Lesci</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://lescipi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Example Page 1</title>
      <link>https://lescipi.github.io/courses/example/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      
      <guid>https://lescipi.github.io/courses/example/example1/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>https://lescipi.github.io/courses/example/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      
      <guid>https://lescipi.github.io/courses/example/example2/</guid>
      <description>

&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-3&#34;&gt;Tip 3&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;

&lt;h2 id=&#34;tip-4&#34;&gt;Tip 4&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://lescipi.github.io/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Statistical concepts with R</title>
      <link>https://lescipi.github.io/post/2019-05-30-statistics-with-r/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/post/2019-05-30-statistics-with-r/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this chapter we review the basics of the R programming language and we explore the tidyverse: a universe of interrelated packages that modernize the basic R and simplify operations in a coherent way. It contributed to the estabilishment of R as one of the preferred tools for data science outside the academia.&lt;/p&gt;
&lt;div id=&#34;r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R&lt;/h2&gt;
&lt;p&gt;To download R, go to CRAN, the &lt;strong&gt;C&lt;/strong&gt;omprehensive &lt;strong&gt;R&lt;/strong&gt; &lt;strong&gt;A&lt;/strong&gt;rchive &lt;strong&gt;N&lt;/strong&gt;etwork. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. There is no need to pick a mirror that is close to the location from where you are downloading: instead use the cloud mirror, &lt;a href=&#34;https://cloud.r-project.org&#34; class=&#34;uri&#34;&gt;https://cloud.r-project.org&lt;/a&gt;, which automatically figures it out optimally.&lt;/p&gt;
&lt;p&gt;Once a year a new major version of R is released, besides 2-3 minor releases. It is suggested to update it regularly. Upgrading can be a bit of a hassle, especially for major versions, which require the users to reinstall all packages, but putting it off only makes it worse and prevents the user to work with the state-of-the-art tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;RStudio&lt;/h2&gt;
&lt;p&gt;RStudio is an integrated development environment, or IDE, for R programming. Download and install it from &lt;a href=&#34;http://www.rstudio.com/download&#34; class=&#34;uri&#34;&gt;http://www.rstudio.com/download&lt;/a&gt;. RStudio is updated usually twice a year. When a new version is available, RStudio notifies the user and asks for the confirmation to perform the update. It is a good practice to upgrade regularly in order to take advantage of the latest and greatest features. For this book, I am making use of RStudio. Writing any kind of paper that requires to write latex code and R code is easely done within RStudio. Furthermore, thanks to great packages, it is nowadays possible to create and deploy apps, websites, html files completely written in RStudio. Therefore, besides statistical analysis, RStudio is a great companion during your years at university and beyond. The three great packages that enhance RStudio capabilities are &lt;code&gt;rmarkdown&lt;/code&gt;, &lt;code&gt;bookdown&lt;/code&gt;, and &lt;code&gt;rshiny&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When start RStudio, four key regions will appear in the interface:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;mimmo.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;mimmo.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;R code can be typed in the console pane, and pressing enter will run it. This way of programming is often called interactive programming. For more complicated pieces of code, and to share code with others, it is convenient to write code in the editor. It is still possible to run a single line of code pressing ctrl and enter, but more conveniently it is possible to run (or source) an entire script.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-r-language-basics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The R language: basics&lt;/h2&gt;
&lt;p&gt;In this section we will review the building blocks R which are, in general the basic activities that a language should have to be considered a :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data structures&lt;/li&gt;
&lt;li&gt;control flow&lt;/li&gt;
&lt;li&gt;iterations&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;data-structures&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data structures&lt;/h3&gt;
&lt;p&gt;R’s base data structures can be organised by their dimensionality (1d, 2d, or nd) and whether they are homogeneous (all contents must be of the same type) or heterogeneous (the contents can be of different types). This gives rise to the five data types most often used in data analysis:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Homogeneous&lt;/th&gt;
&lt;th&gt;Heterogeneous&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;1d&lt;/td&gt;
&lt;td&gt;Atomic&lt;/td&gt;
&lt;td&gt;Vector List&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2d&lt;/td&gt;
&lt;td&gt;Matrix&lt;/td&gt;
&lt;td&gt;Dataframe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;nd&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that R has no 0-dimensional, or scalar types. Individual numbers or strings are actually vectors of length one.&lt;/p&gt;
&lt;p&gt;Given an object, the best way to understand in which data structures it is stored is to use &lt;code&gt;str()&lt;/code&gt;. &lt;code&gt;str()&lt;/code&gt; is short for structure and it gives a compact, human readable description of any R data structure.&lt;/p&gt;
&lt;div id=&#34;vectors&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Vectors&lt;/h4&gt;
&lt;p&gt;The basic data structure in R is the vector. Vectors come in two flavours: atomic vectors and lists. They have three common properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type, &lt;code&gt;typeof()&lt;/code&gt;, what it is&lt;/li&gt;
&lt;li&gt;Length, &lt;code&gt;length()&lt;/code&gt;, how many elements it contains&lt;/li&gt;
&lt;li&gt;Attributes, &lt;code&gt;attributes()&lt;/code&gt;, additional arbitrary metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomic vectors&lt;/strong&gt; are usually created with &lt;code&gt;c()&lt;/code&gt;, short for :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vector &amp;lt;- c(1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They are always flat, even if you nest &lt;code&gt;c()&lt;/code&gt;’s&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(c(1), c(2, 3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Missing values are specified with &lt;code&gt;NA&lt;/code&gt;, which is a logical vector of length 1. All elements of an atomic vector must be the same type, so when you attempt to combine different types they will be coerced to the most flexible type. Types from least to most flexible are: logical, integer, double, and character.&lt;/p&gt;
&lt;p&gt;For example, combining a character and an integer yields a character:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(&amp;#39;a&amp;#39;, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot; &amp;quot;1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a logical vector is coerced to an integer or double, &lt;code&gt;TRUE&lt;/code&gt; becomes 1 and &lt;code&gt;FALSE&lt;/code&gt; becomes 0. This is very useful in conjunction with &lt;code&gt;sum()&lt;/code&gt; and &lt;code&gt;mean()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(c(TRUE, FALSE, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Lists&lt;/strong&gt; are different from atomic vectors because their elements can be of any type, including lists. You construct lists by using &lt;code&gt;list()&lt;/code&gt; instead of &lt;code&gt;c()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- list(1:3, &amp;#39;a&amp;#39;, &amp;quot;b&amp;quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 5
##  $ : int [1:3] 1 2 3
##  $ : chr &amp;quot;a&amp;quot;
##  $ : chr &amp;quot;b&amp;quot;
##  $ : logi [1:3] TRUE FALSE TRUE
##  $ : num [1:2] 2.3 5.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how &lt;code&gt;&#39;&#39;&lt;/code&gt; and &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; can be used interchangeably to define strings, or characters: in R, unlike Python, there is no distinction between the two. As said above, &lt;code&gt;str()&lt;/code&gt; returns the structure of an object, more info with &lt;code&gt;?str&lt;/code&gt;. Lists are sometimes called recursive vectors, because a list can contain other lists. This makes them fundamentally different from atomic vectors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- list(list(list(list())))
str(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 1
##  $ :List of 1
##   ..$ :List of 1
##   .. ..$ : list()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;c()&lt;/code&gt; will combine several lists into one. If given a combination of atomic vectors and lists, &lt;code&gt;c()&lt;/code&gt; will coerce the vectors to lists before combining them. Compare the results of &lt;code&gt;list()&lt;/code&gt; and &lt;code&gt;c()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- list(list(1, 2), c(3, 4))
y &amp;lt;- c(list(1, 2), c(3, 4))
str(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 2
##  $ :List of 2
##   ..$ : num 1
##   ..$ : num 2
##  $ : num [1:2] 3 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 4
##  $ : num 1
##  $ : num 2
##  $ : num 3
##  $ : num 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;arrays-and-matrices&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Arrays and Matrices&lt;/h4&gt;
&lt;p&gt;Matrices are a special type of array: they are 2-dimensional arrays. They can be defined by creating a list of objects and providing the dimensions&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix(list(1, 2, 3, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;), nrow = 3, ncol = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,] 1    &amp;quot;a&amp;quot; 
## [2,] 2    &amp;quot;b&amp;quot; 
## [3,] 3    &amp;quot;c&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix(c(1, 2, 3, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;), nrow = 3, ncol = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,] &amp;quot;1&amp;quot;  &amp;quot;a&amp;quot; 
## [2,] &amp;quot;2&amp;quot;  &amp;quot;b&amp;quot; 
## [3,] &amp;quot;3&amp;quot;  &amp;quot;c&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;matrix()&lt;/code&gt; and &lt;code&gt;array()&lt;/code&gt; can host any kind of data types: they just store the data in a multidimensional format. Note how the number are coerced to strings when fed through &lt;code&gt;c()&lt;/code&gt; contrarely at what happens when using &lt;code&gt;list()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dataframes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Dataframes&lt;/h4&gt;
&lt;p&gt;A dataframe is the most common way of storing data in R, and if used systematically makes data analysis easier. Under the hood, a dataframe is a list of equal-length vectors. This makes it a 2-dimensional structure, so it shares properties of both the matrix and the list. A dataframe has &lt;code&gt;names()&lt;/code&gt;, &lt;code&gt;colnames()&lt;/code&gt;, and &lt;code&gt;rownames()&lt;/code&gt;, although &lt;code&gt;names()&lt;/code&gt; and &lt;code&gt;colnames()&lt;/code&gt; are the same thing. The &lt;code&gt;length()&lt;/code&gt; of a dataframe is the length of the underlying list and so it is the same as &lt;code&gt;ncol()&lt;/code&gt;; &lt;code&gt;nrow()&lt;/code&gt; gives the number of rows. You create a dataframe using &lt;code&gt;data.frame()&lt;/code&gt;, which takes named vectors (atomic vectors or lists) as input:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(x = 1:3, y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;))
str(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    3 obs. of  2 variables:
##  $ x: int  1 2 3
##  $ y: Factor w/ 3 levels &amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;: 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beware &lt;code&gt;data.frame()&lt;/code&gt;’s default behaviour which turns strings into factors. Use &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; to suppress this behaviour.&lt;/p&gt;
&lt;p&gt;You can combine dataframes using &lt;code&gt;cbind()&lt;/code&gt; and &lt;code&gt;rbind()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_1 &amp;lt;- data.frame(x = 1:3, y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)) #row:3, col:2
df_2 &amp;lt;- data.frame(z = 3:1)                       #row:3, col:1
df_3 &amp;lt;- data.frame(x = 10, y = &amp;quot;z&amp;quot;)               #row:1, col:2
cbind(df_1, df_2)                                 #row:3, col:3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x y z
## 1 1 a 3
## 2 2 b 2
## 3 3 c 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rbind(df_1, df_3)                                 #row:4, col:2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x y
## 1  1 a
## 2  2 b
## 3  3 c
## 4 10 z&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When combining column-wise, the number of rows must match, but row names are ignored. When combining row-wise, both the number and names of columns must match.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Functions&lt;/h3&gt;
&lt;p&gt;Functions allow the user to automate common tasks in a more powerful and general way than copy-and-pasting the same code. There are three key steps to creating a new function:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Pick a &lt;strong&gt;name&lt;/strong&gt; for the function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List the inputs, or &lt;strong&gt;arguments&lt;/strong&gt;, to the function inside &lt;code&gt;function (...)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Place the code into the &lt;strong&gt;body&lt;/strong&gt; of the function, a &lt;code&gt;{...}&lt;/code&gt; block that immediately follows &lt;code&gt;function(...)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_func &amp;lt;- function(argument) {
    value &amp;lt;- do_something(argument)
    return(value)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the last &lt;code&gt;return()&lt;/code&gt; can be discarded and we can just write &lt;code&gt;value&lt;/code&gt;. MOre about this below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;control-structures&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Control structures&lt;/h3&gt;
&lt;p&gt;Control structures allow us to specify the execution of the code based on some conditions. They are extremely useful when we want to run a piece of code multiple times, or when we want to run a piece a code if a certain condition is met.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;if&lt;/code&gt; statement allows us to conditionally execute code. It looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (condition) {
  # code executed when condition is TRUE
} else {
  # code executed when condition is FALSE
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below a simple function that uses an &lt;code&gt;if&lt;/code&gt; statement is presented. The goal of this function is to return a logical value describing whether or not a string is equal to the name .&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;check_name &amp;lt;- function(string) {
    if (string == &amp;#39;mimmo&amp;#39;) {
        print(&amp;#39;YES&amp;#39;)
    } else {
        print(&amp;#39;NO&amp;#39;)
    }
}
check_name(&amp;#39;pietro&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;NO&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes advantage of the standard return rule: a function returns the last value that it computed, thus there is no need to use the &lt;code&gt;return()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The condition must evaluate to either a single &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;. If it is a logical vector, we will get a warning message, usually saying that only the first condition has been used; if it is an &lt;code&gt;NA&lt;/code&gt;, we will get an error. Watch out for these messages in your own code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (c(TRUE, FALSE)) {}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in if (c(TRUE, FALSE)) {: the condition has length &amp;gt; 1 and only the
## first element will be used&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (NA) {}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in if (NA) {: missing value where TRUE/FALSE needed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;||&lt;/code&gt; (or) and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and) to combine multiple logical expressions. These operators are &lt;em&gt;short-circuiting&lt;/em&gt;: as soon as &lt;code&gt;||&lt;/code&gt; sees the first &lt;code&gt;TRUE&lt;/code&gt; it returns &lt;code&gt;TRUE&lt;/code&gt; without computing anything else. As soon as &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; sees the first &lt;code&gt;FALSE&lt;/code&gt; it returns &lt;code&gt;FALSE&lt;/code&gt;. This greatly improves performances without causing damages. &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt; should be never used in an &lt;code&gt;if&lt;/code&gt; statement: these are vectorised operations that apply to multiple values.&lt;/p&gt;
&lt;p&gt;You can chain multiple if statements together:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (this) {
    # do this
} else if (that) { 
    # do that
} else {
    # do something else
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we have a very long series of chained &lt;code&gt;if&lt;/code&gt; statements, we can consider to use the &lt;code&gt;switch()&lt;/code&gt; function. It allows us to evaluate selected code based on position or name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;function(x, y, op) {
    switch(op,
           plus = x + y,
           minus = x - y,
           times = x * y,
           divide = x / y,
           stop(&amp;quot;Unknown op!&amp;quot;)
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful function that can often eliminate long chains of &lt;code&gt;if&lt;/code&gt; statements is &lt;code&gt;cut()&lt;/code&gt;. It is used to discretise continuous variables into categories or ranges of values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;iterations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Iterations&lt;/h3&gt;
&lt;p&gt;Every for loop has three components:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;output&lt;/strong&gt;: Before starting the loop, we must always allocate sufficient space for the output. We will see in all our examples that beore a loop is performed, a container is initilized. This is very important for efficiency: if we grow the for loop at each iteration using &lt;code&gt;c()&lt;/code&gt; (for example), our for loop will be very slow; keep in mind that R is already slow in performing for loops compared to other programming languages, that is why, when possible, we should use vectorized function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;sequence&lt;/strong&gt;: This determines what to loop over. Usually in R we loop over indices of vector, such as &lt;code&gt;i in nrow(df)&lt;/code&gt; to loop over dataframe’s columns; the sequence is placed inside &lt;code&gt;(...)&lt;/code&gt; following the &lt;code&gt;for&lt;/code&gt; statement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;body&lt;/strong&gt;: This is the part of the code that does the work. It’s run repeatedly, each time with a different value of the &lt;strong&gt;sequence&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are some variations that it is important to be aware of. There are three basic ways to loop over a vector. So far we have addressed the most general: looping over the numeric indices with &lt;code&gt;for (i in 1:length(x))&lt;/code&gt; or equivalently &lt;code&gt;for (i in seq_along(x)&lt;/code&gt;, and extracting the value of &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;x[[i]]&lt;/code&gt; at each iteration. There are two other forms:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Loop over the elements: &lt;code&gt;for (element in x)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loop over the names: &lt;code&gt;for (name in names(x))&lt;/code&gt;. This gives us name, which we can use to access the value with &lt;code&gt;x[[name]]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;#39;a&amp;#39; = 1, &amp;#39;b&amp;#39; = 2, &amp;#39;c&amp;#39; = 3)

# indeces
for (i in seq_along(x)) {
    print(i)
}

# elements
for (i in x) {
    print(i)
}

# names
for (i in names(x)) {
    print(x[[i]])
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine we want to loop until we get a specific event. We cannot do that sort of iteration with the for loop since we do not know, ex-ante, how many iterations we will need. Instead, we can use a while loop. A while loop is simpler than for loop because it only has two components, a condition and a body:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;while (condition) {
    # body
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A while loop is also more general than a for loop, because we can rewrite any for loop as a while loop, but you cannot rewrite every while loop as a for loop:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in seq_along(x)) {
    # body
}

# Equivalent to
i &amp;lt;- 1
while (i &amp;lt;= length(x)) {
    # body
    i &amp;lt;- i + 1 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, a while loop is a good choice when we want to find out how many iteration we need to fulfill a specific condition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-tidyverse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The tidyverse&lt;/h2&gt;
&lt;p&gt;Base R comes with excellent packages, but we also need to install some other R packages. An R &lt;strong&gt;package&lt;/strong&gt; is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that we will use in this book are part of the so-called tidyverse. The packages in the tidyverse share a common philosophy of data and R programming, and are designed to work together naturally.&lt;/p&gt;
&lt;p&gt;You can install the complete tidyverse with a single line of code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;tidyverse&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On your own computer, type that line of code in the console, and then press enter to run it. R will download the packages from CRAN and install them on to your computer. If you have problems installing, make sure that you are connected to the internet, and that &lt;a href=&#34;https://cloud.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cloud.r-project.org/&lt;/a&gt; is not blocked by a firewall or a proxy.&lt;/p&gt;
&lt;p&gt;To use the functions, objects, and help files in a package until we must load it with &lt;code&gt;library()&lt;/code&gt; or &lt;code&gt;require()&lt;/code&gt;; as far as we are concerned we can consider these two ways of loading R packages equivalent. Once installed, load a package, or a collenction of them in this case, as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 methods overwritten by &amp;#39;ggplot2&amp;#39;:
##   method         from 
##   [.quosures     rlang
##   c.quosures     rlang
##   print.quosures rlang&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.1.1     ✔ purrr   0.3.2
## ✔ tibble  2.1.2     ✔ dplyr   0.8.1
## ✔ tidyr   0.8.3     ✔ stringr 1.4.0
## ✔ readr   1.3.1     ✔ forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells you that tidyverse is loading the ggplot2, tibble, tidyr, readr, purrr, and dplyr packages. These are considered to be the &lt;strong&gt;core&lt;/strong&gt; of the tidyverse because they are used in almost every analysis.&lt;/p&gt;
&lt;p&gt;Packages in the tidyverse change fairly frequently. To check for updates, and optionally install them, run &lt;code&gt;tidyverse_update()&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;tibbles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tibbles&lt;/h3&gt;
&lt;p&gt;Throughout this book we work with  instead of R’s traditional &lt;code&gt;data.frame&lt;/code&gt;. Tibbles &lt;em&gt;are&lt;/em&gt; dataframes, but they tweak some older behaviours to make life a little easier. R is an old language, and some things that were useful 10 or 20 years ago now get in our way. It is difficult to change base R without breaking existing code, so most innovation occurs in packages. Here we will describe the &lt;strong&gt;tibble&lt;/strong&gt; package, which &lt;span class=&#34;citation&#34;&gt;[@r4ds]&lt;/span&gt;. We will use the term tibble and dataframe interchangeably.&lt;/p&gt;
&lt;p&gt;Almost all of the functions that we will use in this book produce tibbles, as tibbles are one of the unifying features of the tidyverse. Most other R packages use regular dataframes, so to coerce a dataframe to a tibble we can use the dplyr function &lt;code&gt;as_tibble()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as_tibble(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 x 5
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
##  1          5.1         3.5          1.4         0.2 setosa 
##  2          4.9         3            1.4         0.2 setosa 
##  3          4.7         3.2          1.3         0.2 setosa 
##  4          4.6         3.1          1.5         0.2 setosa 
##  5          5           3.6          1.4         0.2 setosa 
##  6          5.4         3.9          1.7         0.4 setosa 
##  7          4.6         3.4          1.4         0.3 setosa 
##  8          5           3.4          1.5         0.2 setosa 
##  9          4.4         2.9          1.4         0.2 setosa 
## 10          4.9         3.1          1.5         0.1 setosa 
## # … with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create a new tibble from individual vectors with &lt;code&gt;tibble()&lt;/code&gt;. &lt;code&gt;tibble()&lt;/code&gt; will automatically recycle inputs of length 1, and allows us to refer to variables that we just created, as shown below. For any practical purpose, we can consider the use of &lt;code&gt;tibble()&lt;/code&gt; equivalent to &lt;code&gt;data.frame()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(
    x = 1:5, 
    y = 1, 
    z = x ^ 2 + y
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##       x     y     z
##   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     1     2
## 2     2     1     5
## 3     3     1    10
## 4     4     1    17
## 5     5     1    26&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;tibble()&lt;/code&gt; does much less than &lt;code&gt;data.frame()&lt;/code&gt;: it never changes the type of the inputs (e.g. it never converts strings to factors!), it never changes the names of variables, and it never creates row names.&lt;/p&gt;
&lt;p&gt;It is possible for a tibble to &lt;em&gt;have&lt;/em&gt; column names that are not valid R variable names, known as &lt;strong&gt;non-syntactic&lt;/strong&gt; names. For example, they might not start with a letter, or they might contain unusual characters like a space. To refer to these variables, we need to surround them with backticks, &lt;code&gt;`&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb &amp;lt;- tibble(
    `:)` = &amp;quot;smile&amp;quot;, 
    ` ` = &amp;quot;space&amp;quot;,
    `2000` = &amp;quot;number&amp;quot;
)
tb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   `:)`  ` `   `2000`
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; 
## 1 smile space number&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also need the backticks when working with these variables in other packages, like ggplot2, dplyr, and tidyr.&lt;/p&gt;
&lt;p&gt;Another way to create a tibble is with &lt;code&gt;tribble()&lt;/code&gt;, short for &lt;strong&gt;tr&lt;/strong&gt;ansposed tibble. &lt;code&gt;tribble()&lt;/code&gt; is customised for data entry in code: column headings are defined by formulas (i.e. they start with &lt;code&gt;~&lt;/code&gt;), and entries are separated by commas. This makes it possible to lay out small amounts of data in an easy-to-read form.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tribble(
    ~x, ~y, ~z,
    &amp;quot;a&amp;quot;, 2, 3.6,
    &amp;quot;b&amp;quot;, 1, 8.5
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   x         y     z
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 a         2   3.6
## 2 b         1   8.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two main differences in the usage of a tibble vs a classic &lt;code&gt;data.frame&lt;/code&gt;: printing and subsetting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Printing&lt;/strong&gt;: Tibbles have a refined print method that shows only the first 10 rows, and all the columns that fit on screen. This makes it much easier to work with large data. In addition to its name, each column reports its type, a nice feature borrowed from &lt;code&gt;str()&lt;/code&gt;. Tibbles are designed to not accidentally overwhelm the console when printing large dataframes. But sometimes we need more output than the default display. There are a few options that can help. First, we can explicitly &lt;code&gt;print()&lt;/code&gt; the dataframe and control the number of rows (&lt;code&gt;n&lt;/code&gt;) and the &lt;code&gt;width&lt;/code&gt; of the display. &lt;code&gt;width = Inf&lt;/code&gt; will display all columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% print(n = 10, width = Inf)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see a complete list of options by looking at the package help with &lt;code&gt;package?tibble&lt;/code&gt;. A final option is to use RStudio’s built-in data viewer to get a scrollable view of the complete dataset. This is also often useful at the end of a long chain of manipulations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% View()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Subsetting&lt;/strong&gt;: To pull out a single variable we can use &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;[[&lt;/code&gt;. &lt;code&gt;[[&lt;/code&gt; can extract by name or position; &lt;code&gt;$&lt;/code&gt; only extracts by name but is a little less typing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(
    x = runif(5),
    y = rnorm(5)
)

# Extract by name
df$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[[&amp;#39;x&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Extract by position
df[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use these in a pipe, we need to use the special placeholder &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% .$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% .[[&amp;quot;x&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More on the pipe below. Compared to a &lt;code&gt;data.frame&lt;/code&gt;, tibbles are more strict: they never do partial matching, and they will generate a warning if the column you are trying to access does not exist.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;magrittr-and-the-pipe&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Magrittr and the Pipe&lt;/h3&gt;
&lt;p&gt;Pipes are a powerful tool for clearly expressing a sequence of multiple operations. So far, we have been using them without knowing how they work, or what the alternatives are. Now, in this section, we will explore the pipe in more detail.&lt;/p&gt;
&lt;p&gt;The pipe, &lt;code&gt;%&amp;gt;%&lt;/code&gt;, comes from the &lt;strong&gt;magrittr&lt;/strong&gt; package by Stefan Milton Bache. Packages in the tidyverse load only &lt;code&gt;%&amp;gt;%&lt;/code&gt; for us automatically, not the entire package magrittr explicitly. Here, however, we are focussing on piping, and we are not loading any other package, so we will load it explicitly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The point of the pipe is to help in writing code in a way that is easier to read and understand. To see why the pipe is so useful, we are going to explore a number of ways of writing the same code. Let’s use code to tell a story about a common Bocconi student daily routine:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wake up&lt;br /&gt;
Have a coffee&lt;br /&gt;
Have a shower&lt;br /&gt;
Sit at the desk&lt;br /&gt;
Study Sleep&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We start by defining an object to represent the Bocconi student:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;student &amp;lt;- student()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we use a function for each key verb: &lt;code&gt;wake_up()&lt;/code&gt;, &lt;code&gt;have_coffee()&lt;/code&gt;, &lt;code&gt;shower()&lt;/code&gt;, &lt;code&gt;sit()&lt;/code&gt;, &lt;code&gt;study()&lt;/code&gt;, and &lt;code&gt;sleep()&lt;/code&gt;. Using this object and these verbs, there are (at least) four ways we could retell the story in code:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Save each intermediate step as a new object&lt;/li&gt;
&lt;li&gt;Overwrite the original object many times&lt;/li&gt;
&lt;li&gt;Compose functions&lt;/li&gt;
&lt;li&gt;Use the pipe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will implement each approach, showing the code and talking about the advantages and disadvantages.&lt;/p&gt;
&lt;p&gt;The simplest approach is to save each step as a new object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;student_1 &amp;lt;- wake_up(student)
student_2 &amp;lt;- have_coffee(student_1)
student_3 &amp;lt;- shower(student_2)
student_4 &amp;lt;- sit(student_3)
student_5 &amp;lt;- study(student_4)
student_6 &amp;lt;- sleep(student_5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main downside of this form is that it forces us to name each intermediate element. That leads to two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code is cluttered with unimportant names&lt;/li&gt;
&lt;li&gt;We have to carefully increment the suffix on each line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of creating intermediate objects at each step, we can overwrite the original object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;student &amp;lt;- wake_up(student)
student &amp;lt;- have_coffee(student)
student &amp;lt;- shower(student)
student &amp;lt;- sit(student)
student &amp;lt;- study(student)
student &amp;lt;- sleep(student)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two problems with this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Difficult debugging: if we make a mistake we will need to re-run the complete pipeline from the beginning&lt;/li&gt;
&lt;li&gt;The repetition of the object being transformed (we have written &lt;code&gt;student&lt;/code&gt; 12 times!) obscures what is changing on each line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another approach is to abandon assignment and just string the function calls together:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sleep(
    study(
        sit(
            shower(
                have_coffee(
                    wake_up(student)
                )
            )
        )
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the disadvantage is that we have to read from inside-out, from right-to-left, and that the arguments end up spread far apart. In short, this code is hard for a human to consume.&lt;/p&gt;
&lt;p&gt;Finally, we can use the pipe:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;student %&amp;gt;%
    wake_up() %&amp;gt;% 
    have_coffee() %&amp;gt;% 
    shower() %&amp;gt;% 
    sit() %&amp;gt;% 
    study() %&amp;gt;% 
    sleep()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This form focusses on verbs, not nouns. We can read this series of function compositions like it is a set of imperative actions. The downside, of course, is that we need to be familiar with the pipe. The pipe works by performing a : behind the scenes, magrittr reassembles the code in the pipe to a form that works by overwriting an intermediate object. When we run a pipe like the one above, magrittr does something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_pipe &amp;lt;- function(.) {
    . &amp;lt;- wake_up(.)
    . &amp;lt;- have_coffee(.)
    . &amp;lt;- shower(.)
    . &amp;lt;- sit(.)
    . &amp;lt;- study(.)
    sleep(.)
}
my_pipe(student)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Other packages&lt;/h3&gt;
&lt;p&gt;There are many other excellent packages that are not part of the tidyverse because they solve problems in a different domain or are designed with a different set of underlying principles. This does not make them better or worse, just different.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;running-r-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Running R code&lt;/h2&gt;
&lt;p&gt;The previous sections showed a couple of examples of running R code. Code in the book looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1 + 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two main differences. In the usual R console, we type after the &lt;code&gt;&amp;gt;&lt;/code&gt;, called the &lt;strong&gt;prompt&lt;/strong&gt;; we do not show the prompt in the book. Furthermore, in the book the output is commented out with &lt;code&gt;#&amp;gt;&lt;/code&gt;; in the console it appears directly after the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;python-julia-and-friends&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Python, Julia, and friends&lt;/h2&gt;
&lt;p&gt;In this book, we will not learn anything about Python, Julia, or any other programming language useful for data science. This is not because we think these tools are bad. They are not! And in practice, most data science teams use a mix of languages, often at least R and Python.&lt;/p&gt;
&lt;p&gt;However, we strongly believe that it is best to master one tool at a time. We think R is a great place to start any data science journey because it is an environment designed from the ground up to support data science. R is not just a programming language, but it is also an interactive environment for doing data science. To support interaction, R is a much more flexible language than many of its peers, like Python. This flexibility comes with its downsides, but the big upside is how easy it is to evolve tailored grammars for specific parts of the data science process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>https://lescipi.github.io/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://lescipi.github.io/post/mcmc_tfp/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/post/mcmc_tfp/</guid>
      <description>

&lt;p&gt;#Bayesian Inference with MCMC&lt;/p&gt;

&lt;p&gt;This blog post is an attempt at trying to explain the intuition behind MCMC sampling: specifically, a particular instance of the &lt;strong&gt;Metropolis-Hasting algorithm&lt;/strong&gt;. Critically, we&amp;rsquo;ll be using &lt;code&gt;TensonFlow Probability&lt;/code&gt; code examples to explain the various concepts.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;First, let&amp;rsquo;s import our modules. Note that we will use TensorFlow 2 Beta and we will use the TFP nightly distribution with works fine with TF2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!pip install tensorflow==2.0.0-beta0 
!pip install tfp-nightly
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import tensorflow as tf
import tensorflow_probability as tfp
tfd = tfp.distributions

import matplotlib.pyplot as plt
import seaborn as sns

tf.random.set_seed(1994)
sns.set_context(&#39;paper&#39;)
sns.set_style(&#39;whitegrid&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s generate some data: 20 points from a Gaussian distribution centered around zero.
Note that in TFP the Gaussian distribution is parametrized by mean and standard deviation, not the variance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;observed = tfd.Normal(loc=0., scale=1.).sample(20)
sns.distplot(observed, kde=False)
sns.despine();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_7_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have some observations $x$.&lt;/p&gt;

&lt;p&gt;Usually (in parametric statistics) we assume a data-generating process, i.e. a model $P(x|\theta)$, from which the data we see had been sampled. Looking at the data we come up, somehow, with the idea that a good model for our data is the Gaussian distribution. In other words, we assume that the data are normally distributed.&lt;/p&gt;

&lt;p&gt;The model often depends on unknown parameters $\theta$. They can be unknown because they are intrinsecally random or because simply we do not know them. A normal distribution has two parameters: the mean, $\mu$, and the standard deviation, $\sigma$. For simplicity, we assume we know $\sigma=1$ and we want to make inference on $\mu$ only, that is $\theta \equiv \mu$.&lt;/p&gt;

&lt;p&gt;From a Bayesian viewpoint, we have to assign a prior distribution for this parameter, i.e. $P(\theta)$. Let&amp;rsquo;s also assume a normal distribution as a prior for $\mu$. Our model can be written as follows (we assumed that the prior is a Gaussian distribution with mean 4 and stardard deviation 2)&lt;/p&gt;

&lt;p&gt;$$
\begin{align}
  x_i|\mu &amp;amp;\stackrel{i.i.d.}{\sim} \mathcal{N}(\mu, \sigma=1)&lt;br /&gt;
  \mu &amp;amp;\sim \mathcal{N}(\mu_0 = 4, \sigma_0 = 2)
\end{align}
$$&lt;/p&gt;

&lt;p&gt;In the Bayesian Stat lingo, this way of writing the model derives from the fact that knowing nothing about the joint distribution of $x$ we can assume &lt;a href=&#34;https://en.wikipedia.org/wiki/Exchangeable_random_variables&#34; target=&#34;_blank&#34;&gt;exchangeability&lt;/a&gt;. By the &lt;a href=&#34;https://en.wikipedia.org/wiki/De_Finetti%27s_theorem&#34; target=&#34;_blank&#34;&gt;De Finetti&amp;rsquo;s Theorem&lt;/a&gt; we arrive to the above formulation. Anyway, this goes beyond the scope of this blog post. For more information on Bayesian Analysis look at &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/book/&#34; target=&#34;_blank&#34;&gt;Gelman et al. book&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Prior
mu_0, sigma_0 = 4., 2.
prior = tfd.Normal(mu_0, sigma_0)

#Likelihood params
mu, sigma = tf.reduce_mean(observed), 1. #use the sample mean as guess for mu
likelihood = tfd.Normal(mu, sigma) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(prior.sample(10**5))
sns.distplot(likelihood.sample(10**5))
sns.despine()
plt.legend(labels=[&#39;Prior&#39;,&#39;Likelihood&#39;])
plt.xlim(-5, 7);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_12_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the Bayesian framework, inference, i.e. knowing something more about the unknown parameters, is solved by the Bayes formula&lt;/p&gt;

&lt;p&gt;$$P(\theta|x)=\frac{P(x|\theta)P(\theta)}{P(x)}$$&lt;/p&gt;

&lt;p&gt;The posterior distribution $P(\theta|x)$ &amp;ndash; that is, what we know about our model parameters $\theta$ after having seen thet data $x$ &amp;ndash; is our quantity of interest.&lt;/p&gt;

&lt;p&gt;To compute it, we multiply the &lt;strong&gt;prior&lt;/strong&gt; $P(\theta)$ (what we think about $\theta$ before we have seen any data) and the &lt;strong&gt;likelihood&lt;/strong&gt; $P(x|\theta)$, dividing by the &lt;strong&gt;evidence&lt;/strong&gt; $P(x)$ (i.e. the evidence that the data x was generated by this model).&lt;/p&gt;

&lt;p&gt;However, let&amp;rsquo;s take a closer look at the denominator, $P(x)$. We do not observe it, but we can compute this quantity by integrating over all possible parameter values:&lt;/p&gt;

&lt;p&gt;$$P(x)=\int_\Theta P(x,\theta) \ d\theta$$&lt;/p&gt;

&lt;p&gt;This is the key difficulty with the Bayes formula &amp;ndash; while the formula looks pretty enough, for even slightly non-trivial models we cannot compute the posterior in a closed-form way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: $P(x)$ is a normalizing constant. Up to this normalizing constant, we know exactly how the &lt;em&gt;unnormalized&lt;/em&gt; posterior distribution looks like, i.e.&lt;/p&gt;

&lt;p&gt;$$P(\theta|x) \propto P(x|\theta) P(\theta)$$&lt;/p&gt;

&lt;p&gt;(where $\propto$ mean &amp;ldquo;proportional to&amp;rdquo;). Since we defined both terms on the rhs, &lt;strong&gt;we do know how to sample from the unnormalized posterior distribution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, by the product rule  &amp;ndash; $P(A, B) = P(A|B) P(B)$ &amp;ndash; we can write&lt;/p&gt;

&lt;p&gt;$$P(\theta|x) \propto P(x, \theta)$$&lt;/p&gt;

&lt;p&gt;meaning that the unnormalized posterior is proportional to the joint distribution of $x$ and $\theta$.&lt;/p&gt;

&lt;p&gt;nack to the example. The prior distribution we defined is convenient because we can actually compute the posterior distribution analytically. That&amp;rsquo;s because for a normal likelihood with known standard deviation, the normal prior distribution for $\mu$ is &lt;a href=&#34;https://en.wikipedia.org/wiki/Conjugate_prior&#34; target=&#34;_blank&#34;&gt;conjugate&lt;/a&gt;, i.e. our posterior distribution will belong to the same family of distributions of the prior.&lt;/p&gt;

&lt;p&gt;Therefore, we know that our posterior distribution for $\mu$ is also normal. We can easily look up on wikipedia how we can compute the parameters of the posterior. For a mathematical derivation see &lt;a href=&#34;https://docs.google.com/viewer?a=v&amp;amp;pid=sites&amp;amp;srcid=ZGVmYXVsdGRvbWFpbnxiYXllc2VjdHxneDplNGY0MDljNDA5MGYxYTM&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s define a function which computes the updates for the parameters of the posterior distribution analytically&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_param_updates(data, sigma, prior_mu, prior_sigma): #sigma is known
    n = len(data)
    sigma2 = sigma**2
    prior_sigma2 = prior_sigma**2
    x_bar = tf.reduce_mean(data)
    
    post_mu = ((sigma2 * prior_mu) + (n * prior_sigma2 * x_bar)) / ((n * prior_sigma2) + (sigma2))
    post_sigma2 = (sigma2 * prior_sigma2) / ((n * prior_sigma2) + sigma2)
    post_sigma = tf.math.sqrt(post_sigma2)
    
    return post_mu, post_sigma
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Posterior
mu_n, sigma_n = get_param_updates(observed,
                                  sigma=1, 
                                  prior_mu=mu_0, 
                                  prior_sigma=sigma_0)
posterior = tfd.Normal(mu_n, sigma_n)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(prior.sample(10**5))
sns.distplot(likelihood.sample(10**5))
sns.distplot(posterior.sample(10**5))
sns.despine()
plt.legend(labels=[&#39;Prior&#39;,&#39;Likelihood&#39;, &#39;Posterior&#39;])
plt.xlim(-5, 7);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_20_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This shows our quantity of interest: the probability of $\mu$&amp;rsquo;s values after having seen the data, taking our prior information into account.&lt;/p&gt;

&lt;p&gt;The important thing to acknowledge is that, without conjugacy, we would not even be capable of sketching the posterior distribution: we would not know its shape at all. Let&amp;rsquo;s assume, however, that our prior was not conjugate and we could not solve this by hand &amp;ndash; which is usually the case.&lt;/p&gt;

&lt;h2 id=&#34;approximation-methods&#34;&gt;Approximation methods&lt;/h2&gt;

&lt;p&gt;When we do not have access to the analytic form of the posterior distribution we can resort to MCMC methods. The basic idea is that we can find strategies to sample from the posterior distribution, even if we cannot &amp;ldquo;write it down&amp;rdquo;. These samples are then used to approximate the posterior distribution. One simple strategy to get samples from the posterior distribution is the &lt;strong&gt;Rejection Sampling algorithm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;###Rejection Sampling&lt;/p&gt;

&lt;p&gt;The basic idea of rejection sampling is to sample from an &lt;em&gt;instrumental distribution&lt;/em&gt; and reject samples
that are &amp;ldquo;unlikely&amp;rdquo; under the &lt;em&gt;target distribution&lt;/em&gt;. Here we consider a very specific instance of rejection sampling:
the &lt;strong&gt;Naive Rejection Sampling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Suppose that you can sample from a joint distribution $P(X, \theta)$ (where $X$ is random as well) &amp;ndash; we have seen that we can sample from it since using the product rule we get $P(X, \theta) = P(X|\theta) P(\theta)$, which are both defined by us, so we know how to sample from them!&lt;/p&gt;

&lt;p&gt;We are interested in sampling $\theta$ from the conditional distribution $P(\theta|X = x)$, for some fixed values of $x$ &amp;ndash; i.e. the observed data.&lt;/p&gt;

&lt;p&gt;The Naive Rejection Sampling algorithm works as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sample $\theta$ from the prior $P(\theta)$ and X from the likelihood $P(X|\theta)$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If $X = x$ (the observed data) , accept $\theta$ as a sample from the posterior $P(\theta|X = x)$ , otherwise return to (1) and repeat&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each time you return to step 1, the samples of $\theta$ are independent from the previous ones.&lt;/p&gt;

&lt;p&gt;Pros: step 1 is often practical because both the prior and the likelihood are often easy-to-sample distributions. Cons: the clear shortcoming is can be very unlikely and thus step 2 will very rarely (if ever) accept the candidate sample $\theta$.&lt;/p&gt;

&lt;p&gt;This simple implementation of rejection sampling is enough to provide some intuition and motivate the use of more sophisticated and robust sampling algorithms based on Markov chains.&lt;/p&gt;

&lt;p&gt;###MCMC: The Random-Walk Metropolis-Hasting algorithm&lt;/p&gt;

&lt;p&gt;There is a large family of algorithms that perform MCMC. Most of these algorithms can be expressed at a high level as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start at current position (i.e. a value for $\theta$, say $\theta^{(1)}$)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Propose moving to a new position (say, $\theta^*$)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Accept/Reject the new position based on the position&amp;rsquo;s adherence to the data and prior distributions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;ol&gt;
&lt;li&gt;If you accept: Move to the new position (i.e. $\theta^{(2)}=\theta^*$). Return to Step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;ol&gt;
&lt;li&gt;Else: Do not move to new position. Return to Step 1.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After a large number of iterations, return all accepted positions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on how you implement the above steps you get the various MCMC algorithm. Here we will review the &lt;strong&gt;Random-Walk Metropolis-Hasting algorithm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As we have seen, the main drawback of the rejection sampling is that it is not efficient &amp;ndash; it is unlikely to get exactly $X = x$, especially when it is high-dimensional.&lt;/p&gt;

&lt;p&gt;One way around this problem is to allow for &amp;ldquo;local updates&amp;rdquo;, i.e. let the proposed value depend on the last accepted value.
This makes it easier to come up with a suitable (conditional) proposal, however at the price of yielding a Markov chain, $(\theta&lt;em&gt;s)&lt;/em&gt;{s\geq1}$,
instead of a sequence of independent &lt;strong&gt;realizations&lt;/strong&gt; &amp;ndash; putting it simply, a sequence of random variables is a &lt;em&gt;Markov Chain&lt;/em&gt; if the future state only depends on the present state.&lt;/p&gt;

&lt;p&gt;The RW-MH proposes a new $\theta^*$ according to&lt;/p&gt;

&lt;p&gt;$$\theta^* = \theta_{s} + \varepsilon, \quad \varepsilon \sim g$$&lt;/p&gt;

&lt;p&gt;where $g$ may be any simmetric distribution. Usually, $g = \mathcal{N}(0, \tau)$, so that the proposed new value is simply a draw from $\mathcal{N}(\theta_{s}, \tau)$.&lt;/p&gt;

&lt;p&gt;At first, you find starting parameter position (can be randomly chosen), lets fix it arbitrarily to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mu_current = 2.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The critical point is how you propose the new position (that&amp;rsquo;s the Markov part). You can be very naive or very sophisticated about how you come up with that proposal. The RW-MH algorithm is very naive and just takes a sample from a Gaussian distribution (or whatever simmetric distribution you like) centered on the current value with a certain standard deviation, usually called &lt;em&gt;proposal width&lt;/em&gt; that will determine how far you propose jumps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;proposal_width = 1.
mu_proposal = tfd.Normal(mu_current, proposal_width).sample()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, you evaluate whether that&amp;rsquo;s a good place to jump to or not. To evaluate if it is good you compute the ratio&lt;/p&gt;

&lt;p&gt;$$\rho = \frac{P(\theta^&lt;em&gt;|x)}{P(\theta_s|x)} = \frac{P(x|\theta^&lt;/em&gt;) P(\theta^&lt;em&gt;)/P(x)}{P(x|\theta_s) P(\theta_s)/P(x)} = \frac{P(x, \theta^&lt;/em&gt;)}{P(x, \theta_s)}$$&lt;/p&gt;

&lt;p&gt;Here is the trick: the normalizing constants cancel out. We only have to compute the joint probability &amp;ndash; usually, the log joint probability &amp;ndash; of the data and the parameter values. TFP performs probabilistic inference by evaluating the model parameters using a &lt;code&gt;joint_log_prob&lt;/code&gt; function, which we define below.&lt;/p&gt;

&lt;p&gt;Then,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If $\rho\geq1$, set $\theta^{s+1}=\theta^*$&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If $\rho&lt;1$, set $\theta_{s+1}=\theta^*$ with probability $\rho$, otherwise set $\theta_{s+1}=\theta_s$ (this is where we use the standard uniform distribution -- in practice you draw a sample $u \sim \mathrm{Unif}(0,1)$ and check if $\rho &gt; u$; if it is you accept the proposal)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum up, we accept a proposed move to $\theta^&lt;em&gt;$ whenever the density of the (unnormalzied) joint distribution evaluated at $\theta^&lt;/em&gt;$ is larger than the value of the unnormalized joint distribution evaluated at $\theta_s$ &amp;ndash; so $\theta$ will more often be found in places where the unnormalized joint distribution is denser.&lt;/p&gt;

&lt;p&gt;If this was all we accepted, $\theta$ would get stuck at a local mode of the target distribution, so we also accept occasional moves to lower density regions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def joint_log_prob(data, proposal):
  prior = tfd.Normal(mu_0, sigma_0)
  likelihood = tfd.Normal(proposal, sigma)
  
  return prior.log_prob(proposal) + tf.reduce_mean(likelihood.log_prob(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p_accept = joint_log_prob(observed, mu_proposal) / joint_log_prob(observed, mu_current)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if p_accept &amp;gt; tfd.Uniform().sample():
  mu_current = proposal
  print(&#39;Proposal accepted&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Proposal accepted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In TFP the algorithm is implemented as follows.&lt;/p&gt;

&lt;p&gt;First we define &lt;em&gt;how&lt;/em&gt; the step should be taken, i.e. how the proposal should be made. Since we are implementing the RW-MH algorithm we use the function &lt;code&gt;tfp.mcmc.RandomWalkMetropolis&lt;/code&gt;. It takes as argument the unnormalized join distribution that it will use to compute the acceptance ratio. The only thinkg we have to remenber is that we have to &amp;ldquo;lock the data&amp;rdquo; or &amp;ldquo;define a closure&amp;rdquo; over our joint_log_prob function. In other words, fix the data input of the function &lt;code&gt;joint_log_prob&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def unnormalized_log_posterior(proposal):
  return joint_log_prob(observed, proposal)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rwm = tfp.mcmc.RandomWalkMetropolis(
    target_log_prob_fn=unnormalized_log_posterior
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, we have to define the initial state of the chain, say $\theta_0$. We choose this arbitrarily.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;initial_state = tf.constant(1.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can sample the chain (without storing &amp;ldquo;additional information&amp;rdquo; &lt;code&gt;trace_fn=None&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;trace, kernel_results = tfp.mcmc.sample_chain(
    num_results=2*10**4,
    num_burnin_steps=2000,
    current_state=initial_state,
    num_steps_between_results=5,
    kernel=rwm
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/mcmc/sample.py:335: UserWarning: Tracing all kernel results by default is deprecated. Set the `trace_fn` argument to None (the future default value) or an explicit callback that traces the values you are interested in.
  warnings.warn(&amp;quot;Tracing all kernel results by default is deprecated. Set &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(trace);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_47_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(trace);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_48_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;posterior.mean().numpy()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.063399814
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf.reduce_mean(trace).numpy()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.8029209
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(prior.sample(10**5))
sns.distplot(likelihood.sample(10**5))
sns.distplot(trace)
sns.despine()
plt.legend(labels=[&#39;Prior&#39;,&#39;Likelihood&#39;, &#39;MCMC Posterior&#39;])
plt.xlim(-5, 7);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_51_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://lescipi.github.io/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/post/jupyter/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./academic_0_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-python-and-jupyter&#34;&gt;Install Python and Jupyter&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and Jupyter notebook.&lt;/p&gt;

&lt;p&gt;Otherwise, for advanced users, install Jupyter notebook with &lt;code&gt;pip3 install jupyter&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-blog-post-as-usual-https-sourcethemes-com-academic-docs-managing-content-create-a-blog-post&#34;&gt;Create a new blog post &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-a-blog-post&#34; target=&#34;_blank&#34;&gt;as usual&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY_WEBSITE_FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;my-post&lt;/code&gt; with the file path to your Academic website folder and a name for your blog post (without spaces), respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;MY_WEBSITE_FOLDER&amp;gt;
hugo new  --kind post post/my-post
cd &amp;lt;MY_WEBSITE_FOLDER&amp;gt;/content/post/my-post/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;

&lt;p&gt;Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (&lt;em&gt;New &amp;gt; Python Notebook&lt;/em&gt;) or upload a notebook.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=.

# Copy the contents of Untitled.md and append it to index.md:
cat Untitled.md | tee -a index.md

# Remove the temporary file:
rm Untitled.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;

&lt;p&gt;Open &lt;code&gt;index.md&lt;/code&gt; in your text editor and edit the title etc. in the &lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34;&gt;front matter&lt;/a&gt; according to your preference.&lt;/p&gt;

&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;

&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://lescipi.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/slides/example/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://lescipi.github.io/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://lescipi.github.io/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Academic: the website builder for Hugo</title>
      <link>https://lescipi.github.io/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/post/getting-started/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 &lt;em&gt;widgets&lt;/em&gt;, &lt;em&gt;themes&lt;/em&gt;, and &lt;em&gt;language packs&lt;/em&gt; included!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://sourcethemes.com/academic/#expo&#34; target=&#34;_blank&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;&lt;strong&gt;Setup Academic&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;View the documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/&#34; target=&#34;_blank&#34;&gt;Ask a question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34;&gt;Request a feature or report a bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Updating? View the &lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update Guide&lt;/a&gt; and &lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support development of Academic:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paypal.me/cushen&#34; target=&#34;_blank&#34;&gt;Donate a coffee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/cushen&#34; target=&#34;_blank&#34;&gt;Become a backer on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redbubble.com/people/neutreno/works/34387919-academic&#34; target=&#34;_blank&#34;&gt;Decorate your laptop or journal with an Academic sticker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://academic.threadless.com/&#34; target=&#34;_blank&#34;&gt;Wear the T-shirt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://sourcethemes.com/academic/docs/jupyter/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 15+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;color-themes&#34;&gt;Color Themes&lt;/h2&gt;

&lt;p&gt;Academic comes with &lt;strong&gt;day (light) and night (dark) mode&lt;/strong&gt; built-in. Click the sun/moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34;&gt;Demo&lt;/a&gt; to see it in action!&lt;/p&gt;

&lt;p&gt;Choose a stunning color and font theme for your site. Themes are fully customizable and include:&lt;/p&gt;









  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-1950s.png&#34; data-caption=&#34;1950s&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-1950s_huaf5482f8cea0c5a703a328640e3b7509_21614_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-apogee.png&#34; data-caption=&#34;Apogee&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-apogee_hu4b45d99db97150df01464c393bfd17d4_24119_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-coffee-playfair.png&#34; data-caption=&#34;Coffee theme with Playfair font&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-coffee-playfair_hu446a8f670cc5622adcc77b97ba95f6c5_22462_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-cupcake.png&#34; data-caption=&#34;Cupcake&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-cupcake_hueba8cfa8cfbc7543924fcbf387a99e92_23986_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-dark.png&#34; data-caption=&#34;Dark&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-dark_hu1e8601ecc47f58eada7743fdcd709d3d_21456_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-default.png&#34; data-caption=&#34;Default&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-default_huba6228b7bdf30e2f03f12ea91b2cba0d_21751_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-forest.png&#34; data-caption=&#34;Forest&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-forest_hu4f093a1c683134431456584193ea41ee_21797_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-ocean.png&#34; data-caption=&#34;Ocean&#34;&gt;
  &lt;img src=&#34;https://lescipi.github.io/post/getting-started/gallery/theme-ocean_hu14831ccafc2219f30a7a096fa7617e01_21760_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;

&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34; target=&#34;_blank&#34;&gt;Academic Admin&lt;/a&gt;:&lt;/strong&gt; An admin tool to import publications from BibTeX or import assets for an offline site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34;&gt;Academic Scripts&lt;/a&gt;:&lt;/strong&gt; Scripts to help migrate content to new versions of Academic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;You can choose from one of the following four methods to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-web-browser&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;one-click install using your web browser (recommended)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-git&#34; target=&#34;_blank&#34;&gt;install on your computer using &lt;strong&gt;Git&lt;/strong&gt; with the Command Prompt/Terminal app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-zip&#34; target=&#34;_blank&#34;&gt;install on your computer by downloading the &lt;strong&gt;ZIP files&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34;&gt;install on your computer with &lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then &lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34;&gt;personalize and deploy your new site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;View the Update Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on &lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; to help keep track of &lt;a href=&#34;https://sourcethemes.com/academic/updates&#34; target=&#34;_blank&#34;&gt;updates&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>https://lescipi.github.io/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://lescipi.github.io/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>https://lescipi.github.io/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://lescipi.github.io/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>https://lescipi.github.io/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lescipi.github.io/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
