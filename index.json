[{"authors":["admin"],"categories":null,"content":"Pietro Lesci is a recent graduate at Bocconi University and former trainee at European Central Bank in the Directorate of General Statistics.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1559236242,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://lescipi.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Pietro Lesci is a recent graduate at Bocconi University and former trainee at European Central Bank in the Directorate of General Statistics.","tags":null,"title":"Pietro Lesci","type":"authors"},{"authors":null,"categories":null,"content":" Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1559219181,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://lescipi.github.io/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"https://lescipi.github.io/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":" Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"https://lescipi.github.io/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://lescipi.github.io/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":" Introduction In this chapter we review the basics of the R programming language and we explore the tidyverse: a universe of interrelated packages that modernize the basic R and simplify operations in a coherent way. It contributed to the estabilishment of R as one of the preferred tools for data science outside the academia.\nR To download R, go to CRAN, the Comprehensive R Archive Network. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. There is no need to pick a mirror that is close to the location from where you are downloading: instead use the cloud mirror, https://cloud.r-project.org, which automatically figures it out optimally.\nOnce a year a new major version of R is released, besides 2-3 minor releases. It is suggested to update it regularly. Upgrading can be a bit of a hassle, especially for major versions, which require the users to reinstall all packages, but putting it off only makes it worse and prevents the user to work with the state-of-the-art tools.\n RStudio RStudio is an integrated development environment, or IDE, for R programming. Download and install it from http://www.rstudio.com/download. RStudio is updated usually twice a year. When a new version is available, RStudio notifies the user and asks for the confirmation to perform the update. It is a good practice to upgrade regularly in order to take advantage of the latest and greatest features. For this book, I am making use of RStudio. Writing any kind of paper that requires to write latex code and R code is easely done within RStudio. Furthermore, thanks to great packages, it is nowadays possible to create and deploy apps, websites, html files completely written in RStudio. Therefore, besides statistical analysis, RStudio is a great companion during your years at university and beyond. The three great packages that enhance RStudio capabilities are rmarkdown, bookdown, and rshiny.\nWhen start RStudio, four key regions will appear in the interface:\n R code can be typed in the console pane, and pressing enter will run it. This way of programming is often called interactive programming. For more complicated pieces of code, and to share code with others, it is convenient to write code in the editor. It is still possible to run a single line of code pressing ctrl and enter, but more conveniently it is possible to run (or source) an entire script.\n The R language: basics In this section we will review the building blocks R which are, in general the basic activities that a language should have to be considered a :\n data structures control flow iterations functions  Data structures R’s base data structures can be organised by their dimensionality (1d, 2d, or nd) and whether they are homogeneous (all contents must be of the same type) or heterogeneous (the contents can be of different types). This gives rise to the five data types most often used in data analysis:\n   Homogeneous Heterogeneous    1d Atomic Vector List  2d Matrix Dataframe  nd Array     Note that R has no 0-dimensional, or scalar types. Individual numbers or strings are actually vectors of length one.\nGiven an object, the best way to understand in which data structures it is stored is to use str(). str() is short for structure and it gives a compact, human readable description of any R data structure.\nVectors The basic data structure in R is the vector. Vectors come in two flavours: atomic vectors and lists. They have three common properties:\n Type, typeof(), what it is Length, length(), how many elements it contains Attributes, attributes(), additional arbitrary metadata  They differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\nAtomic vectors are usually created with c(), short for :\nvector \u0026lt;- c(1, 2, 3) They are always flat, even if you nest c()’s\nc(c(1), c(2, 3)) ## [1] 1 2 3 Missing values are specified with NA, which is a logical vector of length 1. All elements of an atomic vector must be the same type, so when you attempt to combine different types they will be coerced to the most flexible type. Types from least to most flexible are: logical, integer, double, and character.\nFor example, combining a character and an integer yields a character:\nc(\u0026#39;a\u0026#39;, 1) ## [1] \u0026quot;a\u0026quot; \u0026quot;1\u0026quot; When a logical vector is coerced to an integer or double, TRUE becomes 1 and FALSE becomes 0. This is very useful in conjunction with sum() and mean()\nsum(c(TRUE, FALSE, 1)) ## [1] 2 Lists are different from atomic vectors because their elements can be of any type, including lists. You construct lists by using list() instead of c():\nx \u0026lt;- list(1:3, \u0026#39;a\u0026#39;, \u0026quot;b\u0026quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9)) str(x) ## List of 5 ## $ : int [1:3] 1 2 3 ## $ : chr \u0026quot;a\u0026quot; ## $ : chr \u0026quot;b\u0026quot; ## $ : logi [1:3] TRUE FALSE TRUE ## $ : num [1:2] 2.3 5.9 Note how '' and \u0026quot;\u0026quot; can be used interchangeably to define strings, or characters: in R, unlike Python, there is no distinction between the two. As said above, str() returns the structure of an object, more info with ?str. Lists are sometimes called recursive vectors, because a list can contain other lists. This makes them fundamentally different from atomic vectors.\nx \u0026lt;- list(list(list(list()))) str(x) ## List of 1 ## $ :List of 1 ## ..$ :List of 1 ## .. ..$ : list() c() will combine several lists into one. If given a combination of atomic vectors and lists, c() will coerce the vectors to lists before combining them. Compare the results of list() and c():\nx \u0026lt;- list(list(1, 2), c(3, 4)) y \u0026lt;- c(list(1, 2), c(3, 4)) str(x) ## List of 2 ## $ :List of 2 ## ..$ : num 1 ## ..$ : num 2 ## $ : num [1:2] 3 4 str(y) ## List of 4 ## $ : num 1 ## $ : num 2 ## $ : num 3 ## $ : num 4  Arrays and Matrices Matrices are a special type of array: they are 2-dimensional arrays. They can be defined by creating a list of objects and providing the dimensions\nmatrix(list(1, 2, 3, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;), nrow = 3, ncol = 2) ## [,1] [,2] ## [1,] 1 \u0026quot;a\u0026quot; ## [2,] 2 \u0026quot;b\u0026quot; ## [3,] 3 \u0026quot;c\u0026quot; matrix(c(1, 2, 3, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;), nrow = 3, ncol = 2) ## [,1] [,2] ## [1,] \u0026quot;1\u0026quot; \u0026quot;a\u0026quot; ## [2,] \u0026quot;2\u0026quot; \u0026quot;b\u0026quot; ## [3,] \u0026quot;3\u0026quot; \u0026quot;c\u0026quot; Note that matrix() and array() can host any kind of data types: they just store the data in a multidimensional format. Note how the number are coerced to strings when fed through c() contrarely at what happens when using list().\n Dataframes A dataframe is the most common way of storing data in R, and if used systematically makes data analysis easier. Under the hood, a dataframe is a list of equal-length vectors. This makes it a 2-dimensional structure, so it shares properties of both the matrix and the list. A dataframe has names(), colnames(), and rownames(), although names() and colnames() are the same thing. The length() of a dataframe is the length of the underlying list and so it is the same as ncol(); nrow() gives the number of rows. You create a dataframe using data.frame(), which takes named vectors (atomic vectors or lists) as input:\ndf \u0026lt;- data.frame(x = 1:3, y = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;)) str(df) ## \u0026#39;data.frame\u0026#39;: 3 obs. of 2 variables: ## $ x: int 1 2 3 ## $ y: Factor w/ 3 levels \u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;: 1 2 3 Beware data.frame()’s default behaviour which turns strings into factors. Use stringsAsFactors = FALSE to suppress this behaviour.\nYou can combine dataframes using cbind() and rbind():\ndf_1 \u0026lt;- data.frame(x = 1:3, y = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;)) #row:3, col:2 df_2 \u0026lt;- data.frame(z = 3:1) #row:3, col:1 df_3 \u0026lt;- data.frame(x = 10, y = \u0026quot;z\u0026quot;) #row:1, col:2 cbind(df_1, df_2) #row:3, col:3 ## x y z ## 1 1 a 3 ## 2 2 b 2 ## 3 3 c 1 rbind(df_1, df_3) #row:4, col:2 ## x y ## 1 1 a ## 2 2 b ## 3 3 c ## 4 10 z When combining column-wise, the number of rows must match, but row names are ignored. When combining row-wise, both the number and names of columns must match.\n  Functions Functions allow the user to automate common tasks in a more powerful and general way than copy-and-pasting the same code. There are three key steps to creating a new function:\nPick a name for the function\n List the inputs, or arguments, to the function inside function (...)\n Place the code into the body of the function, a {...} block that immediately follows function(...)\n  my_func \u0026lt;- function(argument) { value \u0026lt;- do_something(argument) return(value) } Note that the last return() can be discarded and we can just write value. MOre about this below.\n Control structures Control structures allow us to specify the execution of the code based on some conditions. They are extremely useful when we want to run a piece of code multiple times, or when we want to run a piece a code if a certain condition is met.\nAn if statement allows us to conditionally execute code. It looks like this:\nif (condition) { # code executed when condition is TRUE } else { # code executed when condition is FALSE } Below a simple function that uses an if statement is presented. The goal of this function is to return a logical value describing whether or not a string is equal to the name .\ncheck_name \u0026lt;- function(string) { if (string == \u0026#39;mimmo\u0026#39;) { print(\u0026#39;YES\u0026#39;) } else { print(\u0026#39;NO\u0026#39;) } } check_name(\u0026#39;pietro\u0026#39;) ## [1] \u0026quot;NO\u0026quot; This function takes advantage of the standard return rule: a function returns the last value that it computed, thus there is no need to use the return() function.\nThe condition must evaluate to either a single TRUE or FALSE. If it is a logical vector, we will get a warning message, usually saying that only the first condition has been used; if it is an NA, we will get an error. Watch out for these messages in your own code:\nif (c(TRUE, FALSE)) {} ## Warning in if (c(TRUE, FALSE)) {: the condition has length \u0026gt; 1 and only the ## first element will be used ## NULL if (NA) {} ## Error in if (NA) {: missing value where TRUE/FALSE needed You can use || (or) and \u0026amp;\u0026amp; (and) to combine multiple logical expressions. These operators are short-circuiting: as soon as || sees the first TRUE it returns TRUE without computing anything else. As soon as \u0026amp;\u0026amp; sees the first FALSE it returns FALSE. This greatly improves performances without causing damages. | or \u0026amp; should be never used in an if statement: these are vectorised operations that apply to multiple values.\nYou can chain multiple if statements together:\nif (this) { # do this } else if (that) { # do that } else { # do something else } When we have a very long series of chained if statements, we can consider to use the switch() function. It allows us to evaluate selected code based on position or name.\nfunction(x, y, op) { switch(op, plus = x + y, minus = x - y, times = x * y, divide = x / y, stop(\u0026quot;Unknown op!\u0026quot;) ) } Another useful function that can often eliminate long chains of if statements is cut(). It is used to discretise continuous variables into categories or ranges of values.\n Iterations Every for loop has three components:\nThe output: Before starting the loop, we must always allocate sufficient space for the output. We will see in all our examples that beore a loop is performed, a container is initilized. This is very important for efficiency: if we grow the for loop at each iteration using c() (for example), our for loop will be very slow; keep in mind that R is already slow in performing for loops compared to other programming languages, that is why, when possible, we should use vectorized function.\n The sequence: This determines what to loop over. Usually in R we loop over indices of vector, such as i in nrow(df) to loop over dataframe’s columns; the sequence is placed inside (...) following the for statement\n The body: This is the part of the code that does the work. It’s run repeatedly, each time with a different value of the sequence\n  There are some variations that it is important to be aware of. There are three basic ways to loop over a vector. So far we have addressed the most general: looping over the numeric indices with for (i in 1:length(x)) or equivalently for (i in seq_along(x), and extracting the value of x with x[[i]] at each iteration. There are two other forms:\nLoop over the elements: for (element in x)\n Loop over the names: for (name in names(x)). This gives us name, which we can use to access the value with x[[name]]\n  x \u0026lt;- c(\u0026#39;a\u0026#39; = 1, \u0026#39;b\u0026#39; = 2, \u0026#39;c\u0026#39; = 3) # indeces for (i in seq_along(x)) { print(i) } # elements for (i in x) { print(i) } # names for (i in names(x)) { print(x[[i]]) } Imagine we want to loop until we get a specific event. We cannot do that sort of iteration with the for loop since we do not know, ex-ante, how many iterations we will need. Instead, we can use a while loop. A while loop is simpler than for loop because it only has two components, a condition and a body:\nwhile (condition) { # body } A while loop is also more general than a for loop, because we can rewrite any for loop as a while loop, but you cannot rewrite every while loop as a for loop:\nfor (i in seq_along(x)) { # body } # Equivalent to i \u0026lt;- 1 while (i \u0026lt;= length(x)) { # body i \u0026lt;- i + 1 } Therefore, a while loop is a good choice when we want to find out how many iteration we need to fulfill a specific condition.\n  The tidyverse Base R comes with excellent packages, but we also need to install some other R packages. An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that we will use in this book are part of the so-called tidyverse. The packages in the tidyverse share a common philosophy of data and R programming, and are designed to work together naturally.\nYou can install the complete tidyverse with a single line of code:\ninstall.packages(\u0026#39;tidyverse\u0026#39;) On your own computer, type that line of code in the console, and then press enter to run it. R will download the packages from CRAN and install them on to your computer. If you have problems installing, make sure that you are connected to the internet, and that https://cloud.r-project.org/ is not blocked by a firewall or a proxy.\nTo use the functions, objects, and help files in a package until we must load it with library() or require(); as far as we are concerned we can consider these two ways of loading R packages equivalent. Once installed, load a package, or a collenction of them in this case, as follows:\nlibrary(tidyverse) ## Registered S3 methods overwritten by \u0026#39;ggplot2\u0026#39;: ## method from ## [.quosures rlang ## c.quosures rlang ## print.quosures rlang ## ── Attaching packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 3.1.1 ✔ purrr 0.3.2 ## ✔ tibble 2.1.2 ✔ dplyr 0.8.1 ## ✔ tidyr 0.8.3 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.4.0 ## ── Conflicts ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() This tells you that tidyverse is loading the ggplot2, tibble, tidyr, readr, purrr, and dplyr packages. These are considered to be the core of the tidyverse because they are used in almost every analysis.\nPackages in the tidyverse change fairly frequently. To check for updates, and optionally install them, run tidyverse_update().\nTibbles Throughout this book we work with instead of R’s traditional data.frame. Tibbles are dataframes, but they tweak some older behaviours to make life a little easier. R is an old language, and some things that were useful 10 or 20 years ago now get in our way. It is difficult to change base R without breaking existing code, so most innovation occurs in packages. Here we will describe the tibble package, which [@r4ds]. We will use the term tibble and dataframe interchangeably.\nAlmost all of the functions that we will use in this book produce tibbles, as tibbles are one of the unifying features of the tidyverse. Most other R packages use regular dataframes, so to coerce a dataframe to a tibble we can use the dplyr function as_tibble():\nas_tibble(iris) ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # … with 140 more rows We can create a new tibble from individual vectors with tibble(). tibble() will automatically recycle inputs of length 1, and allows us to refer to variables that we just created, as shown below. For any practical purpose, we can consider the use of tibble() equivalent to data.frame().\ntibble( x = 1:5, y = 1, z = x ^ 2 + y ) ## # A tibble: 5 x 3 ## x y z ## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 2 ## 2 2 1 5 ## 3 3 1 10 ## 4 4 1 17 ## 5 5 1 26 Note that tibble() does much less than data.frame(): it never changes the type of the inputs (e.g. it never converts strings to factors!), it never changes the names of variables, and it never creates row names.\nIt is possible for a tibble to have column names that are not valid R variable names, known as non-syntactic names. For example, they might not start with a letter, or they might contain unusual characters like a space. To refer to these variables, we need to surround them with backticks, `:\ntb \u0026lt;- tibble( `:)` = \u0026quot;smile\u0026quot;, ` ` = \u0026quot;space\u0026quot;, `2000` = \u0026quot;number\u0026quot; ) tb ## # A tibble: 1 x 3 ## `:)` ` ` `2000` ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 smile space number We will also need the backticks when working with these variables in other packages, like ggplot2, dplyr, and tidyr.\nAnother way to create a tibble is with tribble(), short for transposed tibble. tribble() is customised for data entry in code: column headings are defined by formulas (i.e. they start with ~), and entries are separated by commas. This makes it possible to lay out small amounts of data in an easy-to-read form.\ntribble( ~x, ~y, ~z, \u0026quot;a\u0026quot;, 2, 3.6, \u0026quot;b\u0026quot;, 1, 8.5 ) ## # A tibble: 2 x 3 ## x y z ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 a 2 3.6 ## 2 b 1 8.5 There are two main differences in the usage of a tibble vs a classic data.frame: printing and subsetting.\nPrinting: Tibbles have a refined print method that shows only the first 10 rows, and all the columns that fit on screen. This makes it much easier to work with large data. In addition to its name, each column reports its type, a nice feature borrowed from str(). Tibbles are designed to not accidentally overwhelm the console when printing large dataframes. But sometimes we need more output than the default display. There are a few options that can help. First, we can explicitly print() the dataframe and control the number of rows (n) and the width of the display. width = Inf will display all columns:\nmtcars %\u0026gt;% print(n = 10, width = Inf) You can see a complete list of options by looking at the package help with package?tibble. A final option is to use RStudio’s built-in data viewer to get a scrollable view of the complete dataset. This is also often useful at the end of a long chain of manipulations.\nmtcars %\u0026gt;% View() Subsetting: To pull out a single variable we can use $ and [[. [[ can extract by name or position; $ only extracts by name but is a little less typing.\ndf \u0026lt;- tibble( x = runif(5), y = rnorm(5) ) # Extract by name df$x ## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655 df[[\u0026#39;x\u0026#39;]] ## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655 # Extract by position df[[1]] ## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655 To use these in a pipe, we need to use the special placeholder .:\ndf %\u0026gt;% .$x ## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655 df %\u0026gt;% .[[\u0026quot;x\u0026quot;]] ## [1] 0.2226020 0.2517551 0.5393786 0.5470887 0.4108655 More on the pipe below. Compared to a data.frame, tibbles are more strict: they never do partial matching, and they will generate a warning if the column you are trying to access does not exist.\n Magrittr and the Pipe Pipes are a powerful tool for clearly expressing a sequence of multiple operations. So far, we have been using them without knowing how they work, or what the alternatives are. Now, in this section, we will explore the pipe in more detail.\nThe pipe, %\u0026gt;%, comes from the magrittr package by Stefan Milton Bache. Packages in the tidyverse load only %\u0026gt;% for us automatically, not the entire package magrittr explicitly. Here, however, we are focussing on piping, and we are not loading any other package, so we will load it explicitly.\nlibrary(magrittr) The point of the pipe is to help in writing code in a way that is easier to read and understand. To see why the pipe is so useful, we are going to explore a number of ways of writing the same code. Let’s use code to tell a story about a common Bocconi student daily routine:\n Wake up\nHave a coffee\nHave a shower\nSit at the desk\nStudy Sleep\n We start by defining an object to represent the Bocconi student:\nstudent \u0026lt;- student() And we use a function for each key verb: wake_up(), have_coffee(), shower(), sit(), study(), and sleep(). Using this object and these verbs, there are (at least) four ways we could retell the story in code:\nSave each intermediate step as a new object Overwrite the original object many times Compose functions Use the pipe  We will implement each approach, showing the code and talking about the advantages and disadvantages.\nThe simplest approach is to save each step as a new object:\nstudent_1 \u0026lt;- wake_up(student) student_2 \u0026lt;- have_coffee(student_1) student_3 \u0026lt;- shower(student_2) student_4 \u0026lt;- sit(student_3) student_5 \u0026lt;- study(student_4) student_6 \u0026lt;- sleep(student_5) The main downside of this form is that it forces us to name each intermediate element. That leads to two problems:\n The code is cluttered with unimportant names We have to carefully increment the suffix on each line  Instead of creating intermediate objects at each step, we can overwrite the original object:\nstudent \u0026lt;- wake_up(student) student \u0026lt;- have_coffee(student) student \u0026lt;- shower(student) student \u0026lt;- sit(student) student \u0026lt;- study(student) student \u0026lt;- sleep(student) There are two problems with this approach:\n Difficult debugging: if we make a mistake we will need to re-run the complete pipeline from the beginning The repetition of the object being transformed (we have written student 12 times!) obscures what is changing on each line.  Another approach is to abandon assignment and just string the function calls together:\nsleep( study( sit( shower( have_coffee( wake_up(student) ) ) ) ) ) Here the disadvantage is that we have to read from inside-out, from right-to-left, and that the arguments end up spread far apart. In short, this code is hard for a human to consume.\nFinally, we can use the pipe:\nstudent %\u0026gt;% wake_up() %\u0026gt;% have_coffee() %\u0026gt;% shower() %\u0026gt;% sit() %\u0026gt;% study() %\u0026gt;% sleep() This form focusses on verbs, not nouns. We can read this series of function compositions like it is a set of imperative actions. The downside, of course, is that we need to be familiar with the pipe. The pipe works by performing a : behind the scenes, magrittr reassembles the code in the pipe to a form that works by overwriting an intermediate object. When we run a pipe like the one above, magrittr does something like this:\nmy_pipe \u0026lt;- function(.) { . \u0026lt;- wake_up(.) . \u0026lt;- have_coffee(.) . \u0026lt;- shower(.) . \u0026lt;- sit(.) . \u0026lt;- study(.) sleep(.) } my_pipe(student)  Other packages There are many other excellent packages that are not part of the tidyverse because they solve problems in a different domain or are designed with a different set of underlying principles. This does not make them better or worse, just different.\n  Running R code The previous sections showed a couple of examples of running R code. Code in the book looks like this:\n1 + 2 ## [1] 3 There are two main differences. In the usual R console, we type after the \u0026gt;, called the prompt; we do not show the prompt in the book. Furthermore, in the book the output is commented out with #\u0026gt;; in the console it appears directly after the code.\n Python, Julia, and friends In this book, we will not learn anything about Python, Julia, or any other programming language useful for data science. This is not because we think these tools are bad. They are not! And in practice, most data science teams use a mix of languages, often at least R and Python.\nHowever, we strongly believe that it is best to master one tool at a time. We think R is a great place to start any data science journey because it is an environment designed from the ground up to support data science. R is not just a programming language, but it is also an interactive environment for doing data science. To support interaction, R is a much more flexible language than many of its peers, like Python. This flexibility comes with its downsides, but the big upside is how easy it is to evolve tailored grammars for specific parts of the data science process.\n  ","date":1559174400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560267228,"objectID":"683b3a5a38668154996575f13f7b1df0","permalink":"https://lescipi.github.io/post/2019-05-30-statistics-with-r/","publishdate":"2019-05-30T00:00:00Z","relpermalink":"/post/2019-05-30-statistics-with-r/","section":"post","summary":"In this chapter we review the basics of the R programming language and we explore the tidyverse: a universe of interrelated packages that modernize the basic R and simplify operations in a coherent way. It contributed to the estabilishment of R as one of the preferred tools for data science outside the academia.","tags":null,"title":"Statistical concepts with R","type":"post"},{"authors":["Pietro Lesci"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://lescipi.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Pietro Lesci"],"categories":[],"content":" #Bayesian Inference with MCMC\nThis blog post is an attempt at trying to explain the intuition behind MCMC sampling: specifically, a particular instance of the Metropolis-Hasting algorithm. Critically, we\u0026rsquo;ll be using TensonFlow Probability code examples to explain the various concepts.\nThe Problem First, let\u0026rsquo;s import our modules. Note that we will use TensorFlow 2 Beta and we will use the TFP nightly distribution with works fine with TF2.\n!pip install tensorflow==2.0.0-beta0 !pip install tfp-nightly  import numpy as np import tensorflow as tf import tensorflow_probability as tfp tfd = tfp.distributions import matplotlib.pyplot as plt import seaborn as sns tf.random.set_seed(1994) sns.set_context('paper') sns.set_style('whitegrid')  Let\u0026rsquo;s generate some data: 20 points from a Gaussian distribution centered around zero. Note that in TFP the Gaussian distribution is parametrized by mean and standard deviation, not the variance.\nobserved = tfd.Normal(loc=0., scale=1.).sample(20) sns.distplot(observed, kde=False) sns.despine();  We have some observations $x$.\nUsually (in parametric statistics) we assume a data-generating process, i.e. a model $P(x|\\theta)$, from which the data we see had been sampled. Looking at the data we come up, somehow, with the idea that a good model for our data is the Gaussian distribution. In other words, we assume that the data are normally distributed.\nThe model often depends on unknown parameters $\\theta$. They can be unknown because they are intrinsecally random or because simply we do not know them. A normal distribution has two parameters: the mean, $\\mu$, and the standard deviation, $\\sigma$. For simplicity, we assume we know $\\sigma=1$ and we want to make inference on $\\mu$ only, that is $\\theta \\equiv \\mu$.\nFrom a Bayesian viewpoint, we have to assign a prior distribution for this parameter, i.e. $P(\\theta)$. Let\u0026rsquo;s also assume a normal distribution as a prior for $\\mu$. Our model can be written as follows (we assumed that the prior is a Gaussian distribution with mean 4 and stardard deviation 2)\n$$ \\begin{align} x_i|\\mu \u0026amp;\\stackrel{i.i.d.}{\\sim} \\mathcal{N}(\\mu, \\sigma=1)\n\\mu \u0026amp;\\sim \\mathcal{N}(\\mu_0 = 4, \\sigma_0 = 2) \\end{align} $$\nIn the Bayesian Stat lingo, this way of writing the model derives from the fact that knowing nothing about the joint distribution of $x$ we can assume exchangeability. By the De Finetti\u0026rsquo;s Theorem we arrive to the above formulation. Anyway, this goes beyond the scope of this blog post. For more information on Bayesian Analysis look at Gelman et al. book.\n#Prior mu_0, sigma_0 = 4., 2. prior = tfd.Normal(mu_0, sigma_0) #Likelihood params mu, sigma = tf.reduce_mean(observed), 1. #use the sample mean as guess for mu likelihood = tfd.Normal(mu, sigma)  sns.distplot(prior.sample(10**5)) sns.distplot(likelihood.sample(10**5)) sns.despine() plt.legend(labels=['Prior','Likelihood']) plt.xlim(-5, 7);  In the Bayesian framework, inference, i.e. knowing something more about the unknown parameters, is solved by the Bayes formula\n$$P(\\theta|x)=\\frac{P(x|\\theta)P(\\theta)}{P(x)}$$\nThe posterior distribution $P(\\theta|x)$ \u0026ndash; that is, what we know about our model parameters $\\theta$ after having seen thet data $x$ \u0026ndash; is our quantity of interest.\nTo compute it, we multiply the prior $P(\\theta)$ (what we think about $\\theta$ before we have seen any data) and the likelihood $P(x|\\theta)$, dividing by the evidence $P(x)$ (i.e. the evidence that the data x was generated by this model).\nHowever, let\u0026rsquo;s take a closer look at the denominator, $P(x)$. We do not observe it, but we can compute this quantity by integrating over all possible parameter values:\n$$P(x)=\\int_\\Theta P(x,\\theta) \\ d\\theta$$\nThis is the key difficulty with the Bayes formula \u0026ndash; while the formula looks pretty enough, for even slightly non-trivial models we cannot compute the posterior in a closed-form way.\nNOTE: $P(x)$ is a normalizing constant. Up to this normalizing constant, we know exactly how the unnormalized posterior distribution looks like, i.e.\n$$P(\\theta|x) \\propto P(x|\\theta) P(\\theta)$$\n(where $\\propto$ mean \u0026ldquo;proportional to\u0026rdquo;). Since we defined both terms on the rhs, we do know how to sample from the unnormalized posterior distribution\nFurthermore, by the product rule \u0026ndash; $P(A, B) = P(A|B) P(B)$ \u0026ndash; we can write\n$$P(\\theta|x) \\propto P(x, \\theta)$$\nmeaning that the unnormalized posterior is proportional to the joint distribution of $x$ and $\\theta$.\nnack to the example. The prior distribution we defined is convenient because we can actually compute the posterior distribution analytically. That\u0026rsquo;s because for a normal likelihood with known standard deviation, the normal prior distribution for $\\mu$ is conjugate, i.e. our posterior distribution will belong to the same family of distributions of the prior.\nTherefore, we know that our posterior distribution for $\\mu$ is also normal. We can easily look up on wikipedia how we can compute the parameters of the posterior. For a mathematical derivation see here.\nLet\u0026rsquo;s define a function which computes the updates for the parameters of the posterior distribution analytically\ndef get_param_updates(data, sigma, prior_mu, prior_sigma): #sigma is known n = len(data) sigma2 = sigma**2 prior_sigma2 = prior_sigma**2 x_bar = tf.reduce_mean(data) post_mu = ((sigma2 * prior_mu) + (n * prior_sigma2 * x_bar)) / ((n * prior_sigma2) + (sigma2)) post_sigma2 = (sigma2 * prior_sigma2) / ((n * prior_sigma2) + sigma2) post_sigma = tf.math.sqrt(post_sigma2) return post_mu, post_sigma  #Posterior mu_n, sigma_n = get_param_updates(observed, sigma=1, prior_mu=mu_0, prior_sigma=sigma_0) posterior = tfd.Normal(mu_n, sigma_n)  sns.distplot(prior.sample(10**5)) sns.distplot(likelihood.sample(10**5)) sns.distplot(posterior.sample(10**5)) sns.despine() plt.legend(labels=['Prior','Likelihood', 'Posterior']) plt.xlim(-5, 7);  This shows our quantity of interest: the probability of $\\mu$\u0026rsquo;s values after having seen the data, taking our prior information into account.\nThe important thing to acknowledge is that, without conjugacy, we would not even be capable of sketching the posterior distribution: we would not know its shape at all. Let\u0026rsquo;s assume, however, that our prior was not conjugate and we could not solve this by hand \u0026ndash; which is usually the case.\nApproximation methods When we do not have access to the analytic form of the posterior distribution we can resort to MCMC methods. The basic idea is that we can find strategies to sample from the posterior distribution, even if we cannot \u0026ldquo;write it down\u0026rdquo;. These samples are then used to approximate the posterior distribution. One simple strategy to get samples from the posterior distribution is the Rejection Sampling algorithm.\n###Rejection Sampling\nThe basic idea of rejection sampling is to sample from an instrumental distribution and reject samples that are \u0026ldquo;unlikely\u0026rdquo; under the target distribution. Here we consider a very specific instance of rejection sampling: the Naive Rejection Sampling.\nSuppose that you can sample from a joint distribution $P(X, \\theta)$ (where $X$ is random as well) \u0026ndash; we have seen that we can sample from it since using the product rule we get $P(X, \\theta) = P(X|\\theta) P(\\theta)$, which are both defined by us, so we know how to sample from them!\nWe are interested in sampling $\\theta$ from the conditional distribution $P(\\theta|X = x)$, for some fixed values of $x$ \u0026ndash; i.e. the observed data.\nThe Naive Rejection Sampling algorithm works as follows:\n Sample $\\theta$ from the prior $P(\\theta)$ and X from the likelihood $P(X|\\theta)$\n If $X = x$ (the observed data) , accept $\\theta$ as a sample from the posterior $P(\\theta|X = x)$ , otherwise return to (1) and repeat\n  Each time you return to step 1, the samples of $\\theta$ are independent from the previous ones.\nPros: step 1 is often practical because both the prior and the likelihood are often easy-to-sample distributions. Cons: the clear shortcoming is can be very unlikely and thus step 2 will very rarely (if ever) accept the candidate sample $\\theta$.\nThis simple implementation of rejection sampling is enough to provide some intuition and motivate the use of more sophisticated and robust sampling algorithms based on Markov chains.\n###MCMC: The Random-Walk Metropolis-Hasting algorithm\nThere is a large family of algorithms that perform MCMC. Most of these algorithms can be expressed at a high level as follows:\n Start at current position (i.e. a value for $\\theta$, say $\\theta^{(1)}$)\n Propose moving to a new position (say, $\\theta^*$)\n Accept/Reject the new position based on the position\u0026rsquo;s adherence to the data and prior distributions.\n  If you accept: Move to the new position (i.e. $\\theta^{(2)}=\\theta^*$). Return to Step 1.   Else: Do not move to new position. Return to Step 1.  After a large number of iterations, return all accepted positions.\n  Based on how you implement the above steps you get the various MCMC algorithm. Here we will review the Random-Walk Metropolis-Hasting algorithm.\nAs we have seen, the main drawback of the rejection sampling is that it is not efficient \u0026ndash; it is unlikely to get exactly $X = x$, especially when it is high-dimensional.\nOne way around this problem is to allow for \u0026ldquo;local updates\u0026rdquo;, i.e. let the proposed value depend on the last accepted value. This makes it easier to come up with a suitable (conditional) proposal, however at the price of yielding a Markov chain, $(\\thetas){s\\geq1}$, instead of a sequence of independent realizations \u0026ndash; putting it simply, a sequence of random variables is a Markov Chain if the future state only depends on the present state.\nThe RW-MH proposes a new $\\theta^*$ according to\n$$\\theta^* = \\theta_{s} + \\varepsilon, \\quad \\varepsilon \\sim g$$\nwhere $g$ may be any simmetric distribution. Usually, $g = \\mathcal{N}(0, \\tau)$, so that the proposed new value is simply a draw from $\\mathcal{N}(\\theta_{s}, \\tau)$.\nAt first, you find starting parameter position (can be randomly chosen), lets fix it arbitrarily to\nmu_current = 2.  The critical point is how you propose the new position (that\u0026rsquo;s the Markov part). You can be very naive or very sophisticated about how you come up with that proposal. The RW-MH algorithm is very naive and just takes a sample from a Gaussian distribution (or whatever simmetric distribution you like) centered on the current value with a certain standard deviation, usually called proposal width that will determine how far you propose jumps.\nproposal_width = 1. mu_proposal = tfd.Normal(mu_current, proposal_width).sample()  Next, you evaluate whether that\u0026rsquo;s a good place to jump to or not. To evaluate if it is good you compute the ratio\n$$\\rho = \\frac{P(\\theta^|x)}{P(\\theta_s|x)} = \\frac{P(x|\\theta^) P(\\theta^)/P(x)}{P(x|\\theta_s) P(\\theta_s)/P(x)} = \\frac{P(x, \\theta^)}{P(x, \\theta_s)}$$\nHere is the trick: the normalizing constants cancel out. We only have to compute the joint probability \u0026ndash; usually, the log joint probability \u0026ndash; of the data and the parameter values. TFP performs probabilistic inference by evaluating the model parameters using a joint_log_prob function, which we define below.\nThen,\n If $\\rho\\geq1$, set $\\theta^{s+1}=\\theta^*$\n If $\\rhou$; if it is you accept the proposal)\n  To sum up, we accept a proposed move to $\\theta^$ whenever the density of the (unnormalzied) joint distribution evaluated at $\\theta^$ is larger than the value of the unnormalized joint distribution evaluated at $\\theta_s$ \u0026ndash; so $\\theta$ will more often be found in places where the unnormalized joint distribution is denser.\nIf this was all we accepted, $\\theta$ would get stuck at a local mode of the target distribution, so we also accept occasional moves to lower density regions.\ndef joint_log_prob(data, proposal): prior = tfd.Normal(mu_0, sigma_0) likelihood = tfd.Normal(proposal, sigma) return prior.log_prob(proposal) + tf.reduce_mean(likelihood.log_prob(data))  p_accept = joint_log_prob(observed, mu_proposal) / joint_log_prob(observed, mu_current)  if p_accept \u0026gt; tfd.Uniform().sample(): mu_current = proposal print('Proposal accepted')  Proposal accepted  In TFP the algorithm is implemented as follows.\nFirst we define how the step should be taken, i.e. how the proposal should be made. Since we are implementing the RW-MH algorithm we use the function tfp.mcmc.RandomWalkMetropolis. It takes as argument the unnormalized join distribution that it will use to compute the acceptance ratio. The only thinkg we have to remenber is that we have to \u0026ldquo;lock the data\u0026rdquo; or \u0026ldquo;define a closure\u0026rdquo; over our joint_log_prob function. In other words, fix the data input of the function joint_log_prob\ndef unnormalized_log_posterior(proposal): return joint_log_prob(observed, proposal)  rwm = tfp.mcmc.RandomWalkMetropolis( target_log_prob_fn=unnormalized_log_posterior )  Secondly, we have to define the initial state of the chain, say $\\theta_0$. We choose this arbitrarily.\ninitial_state = tf.constant(1.)  Finally, we can sample the chain (without storing \u0026ldquo;additional information\u0026rdquo; trace_fn=None)\ntrace, kernel_results = tfp.mcmc.sample_chain( num_results=2*10**4, num_burnin_steps=2000, current_state=initial_state, num_steps_between_results=5, kernel=rwm )  /usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/mcmc/sample.py:335: UserWarning: Tracing all kernel results by default is deprecated. Set the `trace_fn` argument to None (the future default value) or an explicit callback that traces the values you are interested in. warnings.warn(\u0026quot;Tracing all kernel results by default is deprecated. Set \u0026quot;  plt.plot(trace);  sns.distplot(trace);  posterior.mean().numpy()  0.063399814  tf.reduce_mean(trace).numpy()  0.8029209  sns.distplot(prior.sample(10**5)) sns.distplot(likelihood.sample(10**5)) sns.distplot(trace) sns.despine() plt.legend(labels=['Prior','Likelihood', 'MCMC Posterior']) plt.xlim(-5, 7);   ","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560267683,"objectID":"f2e243179073d8b1f00b7682f3c605cd","permalink":"https://lescipi.github.io/post/mcmc_tfp/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/mcmc_tfp/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":["Pietro Lesci"],"categories":[],"content":" from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and Jupyter Install Anaconda which includes Python 3 and Jupyter notebook.\nOtherwise, for advanced users, install Jupyter notebook with pip3 install jupyter.\nCreate a new blog post as usual Run the following commands in your Terminal, substituting \u0026lt;MY_WEBSITE_FOLDER\u0026gt; and my-post with the file path to your Academic website folder and a name for your blog post (without spaces), respectively:\ncd \u0026lt;MY_WEBSITE_FOLDER\u0026gt; hugo new --kind post post/my-post cd \u0026lt;MY_WEBSITE_FOLDER\u0026gt;/content/post/my-post/  Create or upload a Jupyter notebook Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (New \u0026gt; Python Notebook) or upload a notebook.\njupyter notebook  Convert notebook to Markdown jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=. # Copy the contents of Untitled.md and append it to index.md: cat Untitled.md | tee -a index.md # Remove the temporary file: rm Untitled.md  Edit your post metadata Open index.md in your text editor and edit the title etc. in the front matter according to your preference.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://lescipi.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://lescipi.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://lescipi.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://lescipi.github.io/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Pietro Lesci"],"categories":[],"content":" Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup Academic Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes Academic comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n         Ecosystem  Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://lescipi.github.io/post/getting-started/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["Academic"],"title":"Academic: the website builder for Hugo","type":"post"},{"authors":["Pietro Lesci","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://lescipi.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":null,"categories":["R"],"content":" R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   ","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"https://lescipi.github.io/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":["Pietro Lesci","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559219181,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://lescipi.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]